import envs.LearningEnv as Env
import random
import matplotlib.pyplot as plt


# Params
INTERACTION_ROUND = 1000000

AGENT_NUM = 100
BANDWIDTH = 4
NEIGHBORHOOD_SIZE = 12

REWIRING_COST = 2000
REWIRING_PROBABILITY = 0.0001

K = 1

REWIRING_STRATEGY = 4
# LEARNING_STRATEGY = 0

NETWORK_TYPE = 0
DISTRIBUTION_TYPE = 0

EPISODE = 3

average_reward = []
highest_reward = []
lowest_reward = []
average_rewiring = 0.0

DEBUG = -1

sg_result = []

l00 = []
l11 = []
l22 = []

l0 = []
l1 = []
l2 = []

tpl0= 0.0
tpl1= 0.0
tpl2= 0.0


if __name__ == '__main__':

    for sg in [2]:
        result = []
        LEARNING_STRATEGY = sg

        if LEARNING_STRATEGY == 0:
            print('--Learning strategy: BR')
        if LEARNING_STRATEGY == 2:
            print('--Learning strategy: JAL')
        if LEARNING_STRATEGY == 1:
            print('--Learning strategy: JA-WoLF')

        print('C:', REWIRING_COST, 'K:', K)

        average_reward = []
        highest_reward = []
        lowest_reward = []
        average_rewiring = 0.0

        for repeat in range(EPISODE):
            if DEBUG > -1:
                print('Episode: ' + str(repeat))

            # init Env
            env = Env.LearningEnv(AGENT_NUM,
                               NETWORK_TYPE,
                               BANDWIDTH,
                               NEIGHBORHOOD_SIZE,
                               REWIRING_COST,
                               REWIRING_PROBABILITY,
                               DISTRIBUTION_TYPE,
                               REWIRING_STRATEGY,
                               LEARNING_STRATEGY,
                               K)

            phi = env.phi

            for iteration in range(INTERACTION_ROUND):
                if DEBUG > 0:
                    print('-- Interaction round: ', iteration)
                # to avoid the the problem that decision order may influence the fairness
                # shuffle the order at every iteration
                agents = env.network.nodes()
                # random.shuffle(agents)
                # print('Env initialized.')

                # rewiring phase
                # print('Rewiring phase.')

                # do rewiring
                # should be good with sparse rewiring
                for i in agents:
                    agent = env.network.node[i]
                    if random.uniform(0, 1) < phi:
                        neighbors_num = len(env.getNeighbors(i))
                        # print(network.neighbors(i))
                        if neighbors_num > 0:
                            if len(agent['S_'] + agent['BL']) > 0:
                                # do rewire
                                if DEBUG > 0:
                                    print('Agent ' + str(i) + ' does rewiring.')
                                env._rewire(i)
                            else:
                                if DEBUG > 0:
                                    print('No more available potential peers.')
                        else:
                            if DEBUG > 0:
                                print('Agent ' + str(i) + ' is isolated.')
                            # TO-DO
                            if len(agent['S_'] + agent['BL']) > 0:
                                # do rewire
                                if DEBUG > 0:
                                    print('Agent ' + str(i) + ' does rewiring.')
                                env._rewire(i)
                            else:
                                if DEBUG > 0:
                                    print(i, 'has no more available potential peers.')

                # TO-DO
                # more reasonable situation, but complex
                # 1) raise rewiring proposals.
                # 2) decide rewiring target

                # interaction phase
                # print('Interaction phase.')
                for i in env.network.nodes():
                    # do interaction
                    neighborhood = env.getNeighbors(i)
                    if len(neighborhood) > 0:
                        # 1) randomly choose a opponent in S (choose the best opponent)
                        oppo_index = random.randint(0, len(neighborhood) - 1)
                        oppo_agent_no = neighborhood[oppo_index]

                        # sort the players
                        left = min(i, oppo_agent_no)
                        right = max(i, oppo_agent_no)

                        # 2) agent i interacts with certain opponent
                        env._interact(left, right)
                        # env._interact(i, oppo_agent_no)
                    else:
                        # if DEBUG > 0:
                        print('agent ', i, ' has no neighbor.')

                # statistic
                # average single-round payoff within nearest 2000 round
                if (iteration + 1) % 2000 == 0:
                    print(iteration + 1)
                    group_reward, group_rewiring = env.printAgentInfo(0)
                    if sg == 0:
                        l0.append((sum(group_reward) - tpl0) / AGENT_NUM / 2000)
                        tpl0 = sum(group_reward)
                    if sg == 1:
                        l1.append((sum(group_reward) - tpl1) / AGENT_NUM / 2000)
                        tpl1 = sum(group_reward)
                    if sg == 2:
                        l2.append((sum(group_reward) - tpl2) / AGENT_NUM / 2000)
                        tpl2 = sum(group_reward)


            if sg == 0:
                l00.append(l0)
            if sg == 1:
                l11.append(l1)
            if sg == 2:
                l22.append(l2)

            # print(env.oppActionDis)

        if sg == 0:
            for ii in l00:
                print('BR:', ii)
        if sg == 1:
            for ii in l11:
                print('JA-WoLF:',ii)
        if sg == 2:
            for ii in l22:
                print('JAL:',ii)


    print('======================================')
    print('Results below.')

    print('BR:')
    for l in l00:
        print(l)
    print('JA-WoLF:')
    for l in l11:
        print(l)
    print('JAL:')
    for l in l22:
        print(l)





############################################################
# Results

# 18/01/24
# BR, JAL, JA-WoLF

# first test EPISODE = 1
# BR:
# [1.0590152938936983, 1.1836482196049791, 1.2498126914933172, 1.2829299754929129, 1.3497507858603452, 1.3583147645933809, 1.357504617343525, 1.3929985830775415, 1.3777709017483448, 1.4193020365254558, 1.4451129176345305, 1.420961797084622, 1.4748005363108823, 1.4583004156719683, 1.4887174140269612, 1.4596139526197385, 1.4871715305341595, 1.4603577181023686, 1.5062846998934913, 1.5067377378850524, 1.4867192283751023, 1.5111691251007049, 1.5116794944881042, 1.5113675192169937, 1.4875491283080586, 1.4858090342964234, 1.4994750984390686, 1.5110295903758006, 1.5108657947931996, 1.5105843413835578, 1.5115277262846194, 1.510425783624975, 1.5106492465058621, 1.5107426541123352, 1.5113297915758379, 1.5113953634955268, 1.5110703801521752, 1.5125171880685819, 1.5113338413112518, 1.5109006830069236, 1.5109584813957291, 1.5108890599883906, 1.5106462853616662, 1.5110442326385154, 1.5105535043840388, 1.5101062393097207, 1.5116038237487059, 1.5109524763350748, 1.5113153661596308, 1.5109165123815742, 1.5107404134992417, 1.5111112272490002, 1.5111748465139232, 1.5105078613894061, 1.5113268882535675, 1.5102966777364353, 1.510689684725171, 1.5101632838094698, 1.5115593496593274, 1.5102973279065453, 1.5111787645167298, 1.5101116714544967, 1.511227930431664, 1.5111679593583756, 1.5108026985073835, 1.5108409788091854, 1.5106974436803349, 1.5112423751416242, 1.5103380904369428, 1.510461868755929, 1.5112168544484117, 1.5112419597044959, 1.5105467922454328, 1.5112291610683315, 1.5106359605197794, 1.5107755611981639, 1.5113414007855579, 1.5111979899144543, 1.5109947827879153, 1.5111549397187121, 1.5105172573686019, 1.5116977759344317, 1.5110777179418133, 1.5116572478337773, 1.5108590555481984, 1.5105546589244156, 1.5111878803038969, 1.510979207025934, 1.510586198575981, 1.5108116687464155, 1.5108890325543285, 1.5106726298510285, 1.5104493623172863, 1.5115397855166719, 1.5118825113412924, 1.5117568197730558, 1.5113799138361217, 1.5108506226923504, 1.5116148255151884, 1.5108919959998131, 1.510562111705821, 1.510922065326832, 1.510945792253539, 1.5115069477283023, 1.5103370762353576, 1.510677269818969, 1.5110050558734687, 1.5108684796155243, 1.5111682009553908, 1.5103214902506954, 1.5101634558161161, 1.5111758533308655, 1.5104760027041659, 1.5111589560157805, 1.5113497490927204, 1.5105302427586169, 1.5104496964859591, 1.5110357485017554, 1.5106602368353679, 1.5108285859639197, 1.5109581184441596, 1.5109420387018473, 1.5112994846807049, 1.5109436360143125, 1.5102176573646069, 1.5105629151369631, 1.5112039065383747, 1.5105372774307058, 1.5110159459706767, 1.5115325113394482, 1.5105969529619441, 1.5101341247126461, 1.5110093795454875, 1.5110956234510615, 1.511247803512439, 1.5106443706665933, 1.5105386612620577, 1.5113597065788882, 1.5116458810544759, 1.5108168092233316, 1.5113980150170252, 1.5105967021056639, 1.5109917474188654, 1.5112350556895511, 1.5103797766868023, 1.5110236004745217, 1.5112770321464166, 1.5111365053582935, 1.5110463986800613, 1.5113311971855163]
# JA-WoLF:
# [0.33473268363729891, 0.29886312041715601, 0.33484922706352577, 0.25388237580292061, 0.24285387872753955, 0.35286601244531396, 0.4039369677619275, 0.38817221348617342, 0.49793665889538008, 0.55414058056497706, 0.7176769335297577, 0.7249773953052302, 0.73206687690254479, 0.77232529181836751, 0.84616317751441961, 0.81091893041383711, 0.81697313014682038, 0.8964782012256014, 0.86913423580957694, 0.93399508328301362, 0.9569154742627497, 0.85027941191903555, 0.92481975778463299, 0.88783815762845797, 0.9562685014536092, 1.0306416754347738, 0.99658856631424508, 1.0202041650746063, 1.0475416602654801, 1.0560599605436949, 1.0515656549468821, 1.107352798763737, 1.072815737125119, 1.0873028447624062, 1.0964878246245253, 1.0963471926555783, 1.1057302966003353, 1.0971021930247034, 1.1100460162832402, 1.131257383025936, 1.1288072159257625, 1.1554237570635417, 1.1574019693947675, 1.1418884493070236, 1.1437430313322507, 1.1029247312668244, 1.1399402821038571, 1.145123716443982, 1.1371423792272108, 1.1539979052865599, 1.1379054577884824, 1.1733929036432318, 1.1624523714577499, 1.1440958273848052, 1.1624842658850272, 1.164601660545096, 1.1785496935481672, 1.1817610161462333, 1.1545750943769328, 1.1539966401449684, 1.1833524487464968, 1.1723604874520843, 1.1734725194916409, 1.1945893081618659, 1.1929902102587744, 1.1743489540391321, 1.1910858069987595, 1.2012617258761449, 1.2022041303083579, 1.2018834999593999, 1.2035707447817829, 1.1931865772155672, 1.1922173488322088, 1.1927231687071267, 1.1989277815291286, 1.1991595676010847, 1.1970181041833574, 1.1989753448240181, 1.2013403194572125, 1.1912690889970492, 1.1909297978321649, 1.1820187821274437, 1.1988544154710044, 1.2006180252927727, 1.1994921372743881, 1.2001219034539909, 1.2015225041626392, 1.1783789760096743, 1.1978977005489171, 1.1862868718766422, 1.1943121553468146, 1.1962370347033069, 1.200406121883709, 1.1986706126902438, 1.1989029195007308, 1.1708947088928707, 1.2048848227823525, 1.1924610718083195, 1.2029408023647963, 1.1923313751072064, 1.1986945227876493, 1.2112942416945847, 1.2004369282815419, 1.2129652021459862, 1.2160990644335188, 1.2107594185415096, 1.2225728558856062, 1.2190960384881122, 1.2295906327104569, 1.2310324926502632, 1.2298617465965078, 1.2289610442632435, 1.2206788728556783, 1.2304346694475412, 1.2311215277173368, 1.231007536444366, 1.2315606215782464, 1.2324502248586342, 1.234710504837893, 1.23142678710863, 1.2328310116254351, 1.2321404571646264, 1.2329024368481709, 1.2320669465162419, 1.2332445775335841, 1.2334672433231026, 1.2332111165177637, 1.2320947108616307, 1.2327512923220918, 1.2340526493140309, 1.2330799152531289, 1.2327606868012622, 1.2326773739117571, 1.2345778556321001, 1.2328087649883517, 1.2331509226425363, 1.2326185084061509, 1.2321790444355458, 1.222956854402907, 1.2280405343651957, 1.2282680968467332, 1.2299539238669539, 1.2285980948662201, 1.2322531141543203, 1.2294499319561758, 1.2272571535306425, 1.2296560202105156, 1.2303660002469459, 1.2310472473941743, 1.2293604724306613]
# JAL:
# [0.21959827574798474, 0.26795994763496339, 0.32973328791965595, 0.39530953879471836, 0.57151781024013681, 0.72166208145430777, 0.84070386852866652, 0.95264446448927986, 1.1832478152307739, 1.3040769459612307, 1.3621899612173125, 1.3726101888439828, 1.3993971811420771, 1.4772930276559155, 1.4906646796410112, 1.4846143371760427, 1.4801384845244394, 1.5271866218149126, 1.5086022292651677, 1.5114988936876599, 1.5355904257024313, 1.5159306639432815, 1.5483542023987042, 1.529653258674373, 1.5338064815060095, 1.5479739758303994, 1.5642529737680126, 1.5672864175792738, 1.5705104378493224, 1.5728516931562126, 1.5767311439901126, 1.5791388776198683, 1.5827958049442945, 1.5841561007112823, 1.5863278663236833, 1.5871429960054997, 1.5879033184800295, 1.5872373218560405, 1.5866295220071915, 1.587502089989856, 1.5870273192965705, 1.5875789135070517, 1.5872419887387192, 1.5862077642365173, 1.5868306647461838, 1.5867362354554515, 1.5867499157561733, 1.5873134213071969, 1.5866869459910131, 1.5873605243488307, 1.5875310567327587, 1.5872060751001256, 1.5867835554760417, 1.5867412658315525, 1.5871901476282813, 1.586380505654607, 1.5868294590457062, 1.587797869871147, 1.5867687409297841, 1.5869343445775843, 1.5870218937968834, 1.5863295477741026, 1.5872908235128225, 1.5872822555405832, 1.5864076989265719, 1.5871455326138997, 1.586239078742899, 1.587584552401919, 1.586876150626447, 1.5859526187009925, 1.5871010498043336, 1.5868450129722615, 1.5876464750985988, 1.5865902513142116, 1.5867299198442137, 1.587918515098635, 1.5873920618036201, 1.5877511751901545, 1.5872415300443581, 1.585791736895442, 1.5871560343891939, 1.5864512253046967, 1.5872669401696511, 1.5867222122308986, 1.5871449261988329, 1.5870616726688296, 1.5868277720282786, 1.5865650364460797, 1.5876621592335776, 1.5872890578771381, 1.5868018332147971, 1.5857711877659522, 1.5869133878753334, 1.5873348919762298, 1.5874249852232263, 1.5863329157562926, 1.5872152459960616, 1.586585135725215, 1.5872922362385691, 1.5872223932749032, 1.586572142244745, 1.587620354653094, 1.5868281017760746, 1.5875548297316022, 1.5868064874672518, 1.5872553665059248, 1.5865953502766228, 1.5869736056928523, 1.5868397088575736, 1.5864816276361235, 1.5862478979202175, 1.5873881383945048, 1.5873548638481274, 1.5867118558094651, 1.5867177808369697, 1.5867491816578061, 1.5864934761225058, 1.5872223875206337, 1.5873295309342073, 1.587345959535241, 1.5867830680358037, 1.5881602310662344, 1.58657768112652, 1.5873849159037696, 1.5867949441124127, 1.5873618921821191, 1.5873488614129276, 1.5877807773446291, 1.5863668277258425, 1.5867683056396245, 1.5866533859613909, 1.5870643122831731, 1.5870348783618957, 1.5871796193839982, 1.5868215487618371, 1.5869159430999309, 1.5876069958306849, 1.5866857089096309, 1.5857368222437054, 1.5875378406761216, 1.5862049778538569, 1.5872186215662958, 1.5878843622987344, 1.5875580179810151, 1.5870168263282627, 1.5872519243878125, 1.5875836710103974, 1.5863658645124734, 1.587121987559311, 1.5865586309614033]
# JA-WoLF:
# [0.22389807044188317, 0.3275031312904399, 0.55199625817701203, 0.74967970072274526, 0.9448161844997891, 0.95058530535970709, 1.0451494951329741, 1.0655164219356479, 1.0829889425024113, 1.0689217038858263, 1.1780366964237694, 1.1514105056364183, 1.2407542149749387, 1.2560663433325012, 1.2882742718711915, 1.3021555380954244, 1.310428780593744, 1.3092774573389929, 1.3104503466164297, 1.3530766429375183, 1.3374700897511536, 1.3327849938626493, 1.3745797344405624, 1.3688475524441106, 1.3507771184090152, 1.3839148041989702, 1.366359032087284, 1.3635735981699406, 1.352307445359761, 1.3487765641806089, 1.3726541788273585, 1.3753777701710164, 1.329722095083655, 1.370443518349477, 1.3750124143604843, 1.3849487368200859, 1.3893401270465553, 1.3917073309701962, 1.3928998607038054, 1.3860407566518242, 1.3977471152253076, 1.3998571896932461, 1.3895694051345904, 1.3911819078818617, 1.404833649354037, 1.3943926358892305, 1.4052390718784278, 1.4065327603256517, 1.4084419105108827, 1.4086801393491777]
# JAL:
# [0.53356918393519459, 0.87674285484312819, 1.1404677068950324, 1.2213224530802029, 1.2502934804512467, 1.2361102227077017, 1.2700663880988794, 1.2870544453421304, 1.3050674301786045, 1.2571327787446906, 1.3647004667633842, 1.3273631762464764, 1.4011211736880964, 1.3847905110350787, 1.4155199201689195, 1.4089048422218509, 1.4234856824006232, 1.4260628801563475, 1.4333118057573773, 1.4308957337140291, 1.4215975466484065, 1.432918430472482, 1.4467955009215465, 1.4481100808370997, 1.4480590009400203, 1.4481140764031093, 1.4487768403334962, 1.448434980200217, 1.4386464528172929, 1.4406521275660302, 1.444450766189485, 1.4603354797992809, 1.4526460567569361, 1.4661828078951593, 1.4681941314290277, 1.4491171463100427, 1.4732460833679233, 1.4761532528928853, 1.4658233468937687, 1.4736972330598159, 1.4645889823597111, 1.4744431040730048, 1.465249348858837, 1.4748536755547859, 1.4760718106198962, 1.4775790248060412, 1.4775728282883203, 1.4776581238698121, 1.4772768164554704, 1.4777710090667011]

# 1000000
# BR

#