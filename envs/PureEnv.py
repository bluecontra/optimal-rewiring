import envs.BasicEnv as Env
import random
import matplotlib.pyplot as plt


# Params
INTERACTION_ROUND = 10000

AGENT_NUM = 100
BANDWIDTH = 4
NEIGHBORHOOD_SIZE = 12

REWIRING_COST = 40
REWIRING_PROBABILITY = 0.01

K = 4

REWIRING_STRATEGY = 0

NETWORK_TYPE = 0
DISTRIBUTION_TYPE = 0

EPISODE = 10

average_reward = []
highest_reward = []
lowest_reward = []
average_rewiring = 0.0

DEBUG = -1

c_sight_pair = []
for x in range(21):
    c_sight_pair.append([x * 20.0, 400])
print(c_sight_pair)


sg_result = []

if __name__ == '__main__':

    for sg in [0,1,2,3,4]:
        result = []
        REWIRING_STRATEGY = sg

        if REWIRING_STRATEGY == 0:
            print('--Rewiring strategy: Random')
        if REWIRING_STRATEGY == 1:
            print('--Rewiring strategy: HE')
        if REWIRING_STRATEGY == 2:
            print('--Rewiring strategy: Opt1')
        if REWIRING_STRATEGY == 3:
            print('--Rewiring strategy: Opt2')
        if REWIRING_STRATEGY == 4:
            print('--Rewiring strategy: Opt3')

        for [c, sight] in c_sight_pair:
            y_axi = []

            average_reward = []
            highest_reward = []
            lowest_reward = []
            average_rewiring = 0.0
            print('C-Sight pair:' + str([c, sight]))
            REWIRING_COST = c

            for repeat in range(EPISODE):
                if DEBUG > -1:
                    print('Episode: ' + str(repeat))

                # init Env
                env = Env.BasicEnv(AGENT_NUM,
                                   NETWORK_TYPE,
                                   BANDWIDTH,
                                   NEIGHBORHOOD_SIZE,
                                   REWIRING_COST,
                                   REWIRING_PROBABILITY,
                                   DISTRIBUTION_TYPE,
                                   REWIRING_STRATEGY,
                                   K)

                phi = env.phi

                for iteration in range(INTERACTION_ROUND):
                    if DEBUG > 0:
                        print('-- Interaction round: ', iteration)
                    # to avoid the the problem that decision order may influence the fairness
                    # shuffle the order at every iteration
                    agents = env.network.nodes()
                    # random.shuffle(agents)
                    # print('Env initialized.')

                    # rewiring phase
                    # print('Rewiring phase.')

                    # do rewiring
                    # should be good with sparse rewiring
                    for i in agents:
                        agent = env.network.node[i]
                        if random.uniform(0, 1) < phi:
                            neighbors_num = len(env.getNeighbors(i))
                            # print(network.neighbors(i))
                            if neighbors_num > 0:
                                if len(agent['S_'] + agent['BL']) > 0:
                                    # do rewire
                                    if DEBUG > 0:
                                        print('Agent ' + str(i) + ' does rewiring.')
                                    env._rewire(i)
                                else:
                                    if DEBUG > 0:
                                        print('No more available potential peers.')
                            else:
                                if DEBUG > 0:
                                    print('Agent ' + str(i) + ' is isolated.')
                                # TO-DO
                                if len(agent['S_'] + agent['BL']) > 0:
                                    # do rewire
                                    if DEBUG > 0:
                                        print('Agent ' + str(i) + ' does rewiring.')
                                    env._rewire(i)
                                else:
                                    if DEBUG > 0:
                                        print(i, 'has no more available potential peers.')

                    # TO-DO
                    # more reasonable situation, but complex
                    # 1) raise rewiring proposals.
                    # 2) decide rewiring target

                    # interaction phase
                    # print('Interaction phase.')
                    for i in env.network.nodes():
                        # do interaction
                        neighborhood = env.getNeighbors(i)
                        if len(neighborhood) > 0:
                            # 1) randomly choose a opponent in S (choose the best opponent)
                            oppo_index = random.randint(0, len(neighborhood) - 1)
                            oppo_agent_no = neighborhood[oppo_index]

                            # sort the players
                            left = min(i, oppo_agent_no)
                            right = max(i, oppo_agent_no)

                            # 2) agent i interacts with certain opponent
                            env._interact(left, right)
                            # env._interact(i, oppo_agent_no)
                        else:
                            if DEBUG > 0:
                                print('agent ', i, ' has no neighbor.')

                                # statistic
                group_reward, group_rewiring = env.printAgentInfo(0)
                average_reward.append(sum(group_reward) / AGENT_NUM)
                highest_reward.append(max(group_reward))
                lowest_reward.append(min(group_reward))

                average_rewiring = average_rewiring + group_rewiring / AGENT_NUM

                # print(env.oppActionDis)

            # print('--------------------------------------------------------------------')
            # print('--------------------------------------------------------------------')
            # print('Final outputs:')
            # print('Mean average rewiring: ' + str(average_rewiring / EPISODE))
            print('Mean average reward: ' + str(sum(average_reward) / EPISODE))
            # print('Mean highest reward: ' + str(sum(highest_reward) / EPISODE))
            # print('Mean lowest reward: ' + str(sum(lowest_reward) / EPISODE))
            # print('--------------------------------------------------------------------')
            # print('--------------------------------------------------------------------')

            result.append(sum(average_reward) / EPISODE)
        print('Interim result:', result)
        sg_result.append(result)

    print('======================================')
    print('Results below.')

    for l in sg_result:
        print(l)

    # plt.xlim(0.0, 1.0)
    # plt.ylim(-0.1, 1.0)

    # for y in y_list:
    #     plt.plot(x_axi, y)
    # plt.title('(50,3,9) - Optimal - k-sight')
    #
    # plt.show()




############################################################
# Results

# 18/01/24
# Pure Env
# c-sight
# [[0.0, 200], [10.0, 200], [20.0, 200], [30.0, 200], [40.0, 200], [50.0, 200], [60.0, 200], [70.0, 200], [80.0, 200], [90.0, 200], [100.0, 200], [110.0, 200], [120.0, 200], [130.0, 200], [140.0, 200], [150.0, 200], [160.0, 200], [170.0, 200], [180.0, 200], [190.0, 200], [200.0, 200]]
# EPISODE = 10
# Ran
# [1104.1263331865787, 1039.8735986027439, 992.6071637516186, 960.40673918904963, 905.19377726482344, 853.58961364876927, 806.81203224934779, 743.76348882532, 705.95493459435306, 651.15802173572206, 611.75853016003271, 550.36526718486414, 505.83065360670128, 442.21462771905442, 389.48240234984416, 355.13186160851518, 308.6080692960237, 225.55845106507076, 212.8217195587626, 140.59622614592988, 115.25286537198072]

#
# [1099.4574928329291, 1051.5358023389301, 998.49370902457815, 955.81050042529148, 904.3934308257675, 848.15773987090336, 809.53395528204351, 744.845204606881, 702.50644733443175, 664.32174437074571, 604.79769235712297, 562.89885297329783, 506.75604844726297, 450.90999456352233, 408.15967554128969, 352.12651841115462, 304.27819335234301, 255.33496158914832, 208.95196798603118, 156.70228225411566, 106.19704752301216]
# [1454.9477607957963, 1347.0347804189523, 1253.6352109047168, 1164.3913936069598, 1057.6500856805512, 954.11457643974757, 849.07068441267677, 759.2626232595162, 706.38595413730616, 708.90130252217762, 826.3757672242848, 983.55936688569784, 1152.6434972292188, 1218.4744610077335, 1238.4851604057453, 1207.3022238030337, 1177.7107078322795, 1177.8989728719166, 1156.1975968031259, 1146.7733379109527, 1143.7669363056077]
# [1300.7244771427825, 1284.9516315618091, 1263.4539310502425, 1247.672660030986, 1225.9793581346369, 1198.3760294295121, 1182.6313354113304, 1167.6937281764194, 1144.7471272796183, 1149.079101606271, 1150.4770853852228, 1142.0189134551379, 1151.900357730711, 1148.7777536829003, 1143.767006167514, 1149.394066429405, 1147.9821821539367, 1143.9732130393461, 1141.2883817827105, 1157.1441755168639, 1142.1869823853626]
# [1300.1036264686286, 1300.2724825952835, 1291.4079415890224, 1282.0889829460798, 1267.3499181711682, 1272.0385573675198, 1261.4980805190519, 1244.6524647067672, 1245.6047976627813, 1234.1835176027464, 1222.2752335915031, 1218.0116252130954, 1216.872634700122, 1202.6522139938415, 1193.4017267102652, 1167.6036434265366, 1169.8164292949732, 1154.5411953269083, 1139.1938266141292, 1142.6589474984287, 1132.3585306008033]
# [1423.7561758606564, 1397.3184354271652, 1377.1020366815014, 1343.5025904433342, 1329.2547664852366, 1305.5173516532466, 1278.0329970969556, 1252.5786634292006, 1240.6237162625862, 1212.4771204146602, 1197.6873178885426, 1185.5988803987534, 1176.7242141130789, 1176.8941816567442, 1160.5507921905321, 1153.7254247604089, 1149.9870416385852, 1156.4220855674839, 1144.4826482893993, 1142.1161682576169, 1144.1464303558562]

# 18/01/25
# EPISODE = 50

# K = 1
# [[0.0, 100], [5.0, 100], [10.0, 100], [15.0, 100], [20.0, 100], [25.0, 100], [30.0, 100], [35.0, 100], [40.0, 100], [45.0, 100], [50.0, 100], [55.0, 100], [60.0, 100], [65.0, 100], [70.0, 100], [75.0, 100], [80.0, 100], [85.0, 100], [90.0, 100], [95.0, 100], [100.0, 100]]
# [1100.9042784114752, 1079.4252421446806, 1054.6413066964806, 1024.5156382688756, 998.75300189541679, 976.75797342204703, 948.28618980729345, 928.83831688066562, 895.20923173537744, 871.87344539943194, 846.95549005124326, 829.65579812163412, 804.9222715442728, 771.1026986368754, 752.0501780231175, 727.26503687444415, 698.76831331508083, 681.96537958960926, 657.21649203478887, 621.62371243369512, 600.61383385170348]
# [1451.6537088465195, 1403.2224769083193, 1354.6704694948689, 1305.3147008028473, 1255.1419525749741, 1208.5983149657782, 1151.2709794760292, 1112.7798779575487, 1080.2642901640811, 1078.9170963087788, 1138.7100771553949, 1215.0527850152735, 1275.0216246556226, 1283.6267775117644, 1262.0366271221292, 1228.900214931929, 1194.0353487791579, 1173.1317806643535, 1148.4454035615788, 1148.5648595313019, 1139.904888813481]
# [1295.9594891760266, 1283.8576621875789, 1260.872113929712, 1243.5904900640398, 1228.9163803192675, 1201.94504857111, 1187.417549973693, 1168.2501275261836, 1158.9927674752346, 1149.7591924842061, 1151.2768272031076, 1149.1058377988013, 1147.1185423363233, 1153.7230507940014, 1142.9208307614374, 1144.4323002537651, 1146.0221109458505, 1148.8415462914504, 1141.9052068270007, 1143.9260572575556, 1149.4945684375423]
# [1301.2759990305699, 1302.9078604431304, 1291.2303598648834, 1294.2314691691192, 1283.0890390858758, 1281.1433887635967, 1277.5917814452721, 1270.897031724623, 1266.572157441223, 1262.2308610558528, 1257.1215228221479, 1250.5422469663768, 1245.9756854055531, 1227.3651943871398, 1217.8885220228258, 1188.3336443393387, 1159.6430918546635, 1152.3658478193836, 1147.9195308752796, 1147.3981586561945, 1135.8677178125281]
# [1419.3698430729319, 1408.8889076254493, 1396.2611840680954, 1385.4742236437141, 1369.2605598965529, 1359.4526542536446, 1347.7591058756057, 1336.808765759326, 1321.228918194829, 1294.1160320786075, 1269.1187825468476, 1248.0899712027826, 1220.2381108220741, 1191.802073207075, 1170.1588907377943, 1151.0787935560493, 1151.4536665833468, 1146.2296035653742, 1149.9729480854185, 1146.2544844015713, 1143.2017733333298]

# K = 2
# [[0.0, 200], [10.0, 200], [20.0, 200], [30.0, 200], [40.0, 200], [50.0, 200], [60.0, 200], [70.0, 200], [80.0, 200], [90.0, 200], [100.0, 200], [110.0, 200], [120.0, 200], [130.0, 200], [140.0, 200], [150.0, 200], [160.0, 200], [170.0, 200], [180.0, 200], [190.0, 200], [200.0, 200]]
# [1103.225660907347, 1050.1487673508075, 999.91635064068646, 954.1253674323001, 903.39115654148122, 850.95882438132787, 804.16748618929512, 753.74506640908726, 706.70502787748717, 653.20930525431095, 597.9844314354566, 553.2052666836629, 491.81575514574723, 466.7501760054281, 401.17241926446991, 352.79567036710768, 301.45122910541318, 256.44329355991283, 203.83663801626659, 143.06950897099165, 102.66474610073301]
# [1457.1981375066712, 1356.9212810240331, 1252.575777523472, 1156.1347560581664, 1061.8916127721809, 953.138423898719, 859.8030288981588, 757.37598461828964, 698.64610234426596, 699.05240783344937, 800.61426038247259, 991.72827156630342, 1143.9803681618887, 1229.4825784840846, 1234.0868771765815, 1212.3272554363791, 1185.0845822774872, 1164.5947594137238, 1150.3890249684309, 1137.10265527506, 1144.6984214637598]
# [1296.8945633716439, 1280.6640046752002, 1272.3571608348898, 1241.4368862848455, 1224.0524747904119, 1203.3756727089053, 1186.271913075072, 1172.0989210821747, 1164.8333109369598, 1150.9144116218004, 1153.392605859907, 1137.1628732693371, 1141.2461371592813, 1142.0681505267385, 1143.0730734718613, 1138.841510476803, 1139.9173419584095, 1149.0993128746177, 1149.3874978081678, 1148.0439354119771, 1146.226603608558]
# [1302.772551341023, 1298.1036224537006, 1287.27311880867, 1275.8451547780742, 1274.1035342792077, 1264.3399202056819, 1252.6950014631548, 1259.225865468328, 1252.7079804315224, 1240.1078214009656, 1237.1695874547906, 1219.1023563691303, 1219.8880022797118, 1209.2656796622464, 1188.1611303011996, 1175.6627310800422, 1156.0600386842934, 1148.4948231641367, 1147.7379366416246, 1140.0370415498314, 1142.9094827040524]
# [1425.9806907025149, 1401.3612670551106, 1376.4343885604994, 1347.5252273194656, 1330.577419645293, 1292.2785083467095, 1279.666194840142, 1262.766888405966, 1231.5168210106694, 1218.0693059678642, 1198.779071561506, 1184.4339766543817, 1178.9501686035087, 1174.7317555817201, 1161.8664004456525, 1152.9508739321855, 1152.9610886758724, 1147.6233175388477, 1142.0664896317062, 1147.3942582581535, 1145.0035318965688]

# K = 4
# [1104.5992027872228, 1003.3399889770376, 902.62509882104143, 800.24488858092923, 700.47338513551279, 604.3610453659935, 497.36860645301692, 390.118544572578, 308.96048532388767, 199.87941603624171, 105.54810310061497, -1.4953090356058103, -106.4056378278526, -190.53590578827774, -297.67985407060138, -407.26657746102654, -509.11349442242573, -612.47509644154195, -693.58113157007358, -794.35509076708547, -891.362130441114]
# [1456.2621070475566, 1257.6248716534815, 1050.4464958017461, 862.02107641432474, 706.1714543808406, 808.81765426163156, 1154.7262118452545, 1232.2670355140115, 1176.9871822594539, 1153.7332385152063, 1150.295051487333, 1142.6532428977337, 1144.7070993579839, 1142.1360134221325, 1146.5336253075045, 1149.2079394988095, 1148.2563004548181, 1145.2263719553296, 1142.5476221562346, 1139.3797058386035, 1136.9941554926875]
# [1295.2938473206609, 1258.9047247563724, 1223.4343680913285, 1181.2122745163063, 1160.4985882387148, 1146.8483252413162, 1149.0515041607534, 1146.7051738761811, 1138.2064383873862, 1148.2971434692342, 1143.0032664395824, 1149.7981625441562, 1150.0641140634482, 1145.3041139205043, 1141.2385525379154, 1146.6967413399582, 1139.793070571473, 1145.2895742305138, 1140.8718855072905, 1149.0782514928403, 1139.3432595125687]
# [1301.0942642764107, 1288.5516920840071, 1268.91874422258, 1260.686269635549, 1247.4179874598656, 1234.5125702804735, 1206.0484991280525, 1185.8290265883143, 1163.6639723557219, 1146.6292288414129, 1145.8894582646674, 1150.985827461355, 1143.0065690944189, 1143.8071561846489, 1143.0956342665822, 1150.8553494026335, 1139.6718145444054, 1143.1712033694951, 1141.7731391486943, 1148.6949271899275, 1146.3289775945293]
# [1428.8575696731909, 1369.9291110689996, 1328.1646893386664, 1276.6252465664488, 1238.0412664191233, 1188.9658881810758, 1183.1292065047596, 1165.7854333365583, 1139.2391255564576, 1144.1353721348707, 1145.2924145409556, 1143.4757204033656, 1143.1146560106479, 1145.5837536553602, 1141.086424443841, 1142.5320333868831, 1153.8769527068723, 1143.0368021289255, 1138.3652350085003, 1142.4340015564758, 1147.6100474524701]

## More interaction
# 10000 round

# K = 2
# [11523.018558660628, 11105.022761361306, 10548.467950902394, 9996.2085572936867, 9482.8584306666198, 9087.0012748645859, 8533.9661167458889, 8090.6995550429683, 7489.0704684411448, 7091.6581435585776, 6581.6601406803993, 6034.5952913546007, 5463.0418350734381, 5012.0877989355349, 4515.4066256760943, 3961.3622158078228, 3554.9273358113933, 3075.4300520932038, 2481.885783623819, 2128.682831706702, 1530.9719504722048]
# [15868.176952992333, 14794.528870165843, 13883.028577385248, 12865.121431011368, 11830.106615475743, 10867.124869435369, 9783.0849226550472, 8934.7858396330357, 8254.4307127380544, 8199.0105973056961, 9042.7303982541653, 10734.906413883484, 12528.275654575551, 13370.003542067201, 13277.250472425463, 12784.78449055292, 12278.44573763359, 12112.091802818068, 11827.758689097642, 11640.003469270119, 11614.583923031336]
# [13436.079279315809, 13450.098766882371, 13261.615352199089, 13203.91050869239, 12898.969132483149, 12633.787686939593, 12314.285810780042, 12085.354832012439, 12126.376295666536, 11690.83707135296, 11856.610396040282, 11770.940279669379, 11627.510429696096, 11644.834259527135, 11838.829674846111, 11723.857336408964, 11845.547087849647, 11455.766803665338, 11487.67931322328, 11556.007839949505, 11788.685214909116]
# [13531.74406891256, 13610.37912251027, 13470.34434249886, 13592.431207776881, 13388.765687067589, 13543.415265031095, 13412.49149472146, 13245.82927399893, 13392.642697815778, 13343.076914338035, 13363.117441983817, 13283.178478867199, 13280.937624569549, 13166.051573922658, 12796.506212894517, 12298.836921429025, 12165.984180571468, 11921.406535340366, 11740.859204714341, 11667.844842565139, 11705.10468516276]
# [15195.623927822657, 15112.662288665728, 15111.390540307979, 15199.215462007287, 15024.60994258022, 14970.143031932981, 15019.695962642054, 15007.290933897209, 14840.368743871566, 14665.033938502249, 14298.610350298424, 13955.316691278389, 13153.873782258608, 12655.92047533637, 12072.943241894232, 11891.208243116114, 11866.345701716873, 11645.510016141548, 11617.229530914194, 11826.156632023392, 11637.412189197416]

# K = 4
# [11569.374413900758, 10496.678237691789, 9503.8383987382931, 8614.9252192999793, 7570.9982290021271, 6510.4175725370751, 5481.0028777144144, 4557.5404288505724, 3536.9984334519454, 2546.2043751001743, 1419.8994475376805, 467.32785051952817, -577.15283891128911, -1492.0545881635589, -2482.1525498182446, -3552.3034128659469, -4517.8135407448681, -5461.0066904333489, -6506.2836909779717, -7471.5866299018544, -8409.3497770295253]
# [15800.984349394208, 13863.54115473913, 11833.362216024807, 9802.7239575698477, 7968.0444333321329, 5839.3188527957609, 3808.2847728746592, 1969.6661751762022, 558.57109517792401, 445.36224187782352, 1790.8088683317546, 5992.5435617157063, 10626.798964976493, 12826.905379602267, 13246.267514692381, 12764.421605248941, 12201.78916296038, 12064.097748099699, 11566.36310732791, 11633.300803521133, 11626.799884700155]
# [13372.76673335637, 13207.274792324732, 13098.716445413032, 12859.62934651545, 12792.991695727358, 12502.538687074873, 12323.569376030218, 11934.511660031098, 12016.566540906621, 12043.444632893466, 11684.131345241256, 11678.596332857906, 11896.821505104546, 11675.438738327075, 11572.763431642652, 11692.995393952773, 11658.554856600431, 11564.884085644479, 11688.286512354498, 11646.833727804855, 11721.360694565421]
# [13456.99117298252, 13532.614912236837, 13417.763718333508, 13422.876688124685, 13347.69796626083, 13361.240850952358, 13372.061666571954, 13483.181136752872, 13349.17539786528, 13359.475782643092, 13298.115873563982, 13285.339168634891, 13105.067693657969, 13067.521353094624, 12662.464417208375, 12314.604805923655, 11826.29916198134, 11704.743237304639, 11752.070623123693, 11776.941617468839, 11573.732735419773]
# [15172.323472984606, 15119.644044545048, 15191.615020399206, 15082.635097672895, 14965.65342269509, 14943.13981839683, 14756.394040311241, 14708.869801558592, 14615.027422150128, 14636.707552392594, 14349.813859121114, 13946.434827222238, 13406.39334494526, 12508.557867029822, 12052.097545893386, 12000.152520812248, 11769.621461704806, 11703.510586567574, 11805.08683322849, 11750.860982281534, 11638.460468446241]
