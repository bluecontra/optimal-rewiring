import envs.MixEnv as Env
import random
import matplotlib.pyplot as plt


# Params
INTERACTION_ROUND = 1000

AGENT_NUM = 100
BANDWIDTH = 4
NEIGHBORHOOD_SIZE = 12

REWIRING_COST = 40
REWIRING_PROBABILITY = 0.01

K = 1

REWIRING_STRATEGY = [0.2,0.2,0.2,0.2,0.2]

NETWORK_TYPE = 0
DISTRIBUTION_TYPE = 0

EPISODE = 50

average_reward = []
highest_reward = []
lowest_reward = []
average_rewiring = 0.0

DEBUG = -1

c_sight_pair = []
for x in range(21):
    c_sight_pair.append([x * 5.0, 100])
print(c_sight_pair)

# c_list = []
# for x in range(0,11):
#     c_list.append(x*20.0)
# print(c_list)

s0_axi = []
s1_axi = []
# s2_axi = []
# s3_axi = []
s4_axi = []

if __name__ == '__main__':

    for [c, sight] in c_sight_pair:
        s0 = []
        s1 = []
        # s2 = []
        # s3 = []
        s4 = []

        average_reward = []
        highest_reward = []
        lowest_reward = []
        average_rewiring = 0.0
        print('C-Sight pair:' + str([c, sight]))
        REWIRING_COST = c

        for repeat in range(EPISODE):
            if DEBUG > -1:
                print('Episode: ' + str(repeat))

            # init Env
            env = Env.MixEnv(AGENT_NUM,
                               NETWORK_TYPE,
                               BANDWIDTH,
                               NEIGHBORHOOD_SIZE,
                               REWIRING_COST,
                               REWIRING_PROBABILITY,
                               DISTRIBUTION_TYPE,
                               REWIRING_STRATEGY,
                               K)

            phi = env.phi

            for iteration in range(INTERACTION_ROUND):
                if DEBUG > 0:
                    print('-- Interaction round: ', iteration)
                # to avoid the the problem that decision order may influence the fairness
                # shuffle the order at every iteration
                agents = env.network.nodes()
                # random.shuffle(agents)
                # print('Env initialized.')

                # rewiring phase
                # print('Rewiring phase.')

                # do rewiring
                # should be good with sparse rewiring
                for i in agents:
                    agent = env.network.node[i]
                    if random.uniform(0, 1) < phi:
                        neighbors_num = len(env.getNeighbors(i))
                        # print(network.neighbors(i))
                        if neighbors_num > 0:
                            if len(agent['S_'] + agent['BL']) > 0:
                                # do rewire
                                if DEBUG > 0:
                                    print('Agent ' + str(i) + ' does rewiring.')
                                env._rewire(i)
                            else:
                                if DEBUG > 0:
                                    print('No more available potential peers.')
                        else:
                            if DEBUG > 0:
                                print('Agent ' + str(i) + ' is isolated.')
                            # TO-DO
                            if len(agent['S_'] + agent['BL']) > 0:
                                # do rewire
                                if DEBUG > 0:
                                    print('Agent ' + str(i) + ' does rewiring.')
                                env._rewire(i)
                            else:
                                if DEBUG > 0:
                                    print(i, 'has no more available potential peers.')

                # TO-DO
                # more reasonable situation, but complex
                # 1) raise rewiring proposals.
                # 2) decide rewiring target

                # interaction phase
                # print('Interaction phase.')
                for i in env.network.nodes():
                    # do interaction
                    neighborhood = env.getNeighbors(i)
                    if len(neighborhood) > 0:
                        # 1) randomly choose a opponent in S (choose the best opponent)
                        oppo_index = random.randint(0, len(neighborhood) - 1)
                        oppo_agent_no = neighborhood[oppo_index]

                        # sort the players
                        left = min(i, oppo_agent_no)
                        right = max(i, oppo_agent_no)

                        # 2) agent i interacts with certain opponent
                        env._interact(left, right)
                        # env._interact(i, oppo_agent_no)
                    else:
                        if DEBUG > 0:
                            print('agent ', i, ' has no neighbor.')

            s0_reward, s1_reward, s2_reward, s3_reward, s4_reward = env.printAgentInfoEveryStg()

            if s0_reward != []:
                s0.append(sum(s0_reward) / len(s0_reward))

            if s1_reward != []:
                s1.append(sum(s1_reward) / len(s1_reward))

            # if s2_reward != []:
            #     s2.append(sum(s2_reward) / len(s2_reward))
            #
            # if s3_reward != []:
            #     s3.append(sum(s3_reward) / len(s3_reward))

            if s4_reward != []:
                s4.append(sum(s4_reward) / len(s4_reward))

        print('--------------------------------------------------------------------')
        print('--------------------------------------------------------------------')
        print('Final outputs:')

        print('Mean Random reward: ' + str(sum(s0) / len(s0)))
        print('Mean HE reward: ' + str(sum(s1) / len(s1)))
        # print('Mean Opt1 reward: ' + str(sum(s2) / len(s2)))
        # print('Mean Opt2 reward: ' + str(sum(s3) / len(s3)))
        print('Mean Opt3 reward: ' + str(sum(s4) / len(s4)))

        s0_axi.append(sum(s0) / len(s0))
        s1_axi.append(sum(s1) / len(s1))
        # s2_axi.append(sum(s2) / len(s2))
        # s3_axi.append(sum(s3) / len(s3))
        s4_axi.append(sum(s4) / len(s4))

    print('======================================')
    print('Results below.')

    print('Ran: ', s0_axi)
    print('HE: ', s1_axi)
    # print('Opt1: ', s2_axi)
    # print('Opt2: ', s3_axi)
    print('Opt3: ', s4_axi)


    # plt.xlim(0.0, 1.0)
    # plt.ylim(-0.1, 1.0)

    # for y in y_list:
    #     plt.plot(x_axi, y)
    # plt.title('(50,3,9) - Optimal - k-sight')
    #
    # plt.show()




############################################################
# Results

# 18/01/24
# Pure Env
# c-sight
# [[0.0, 200], [10.0, 200], [20.0, 200], [30.0, 200], [40.0, 200], [50.0, 200], [60.0, 200], [70.0, 200], [80.0, 200], [90.0, 200], [100.0, 200], [110.0, 200], [120.0, 200], [130.0, 200], [140.0, 200], [150.0, 200], [160.0, 200], [170.0, 200], [180.0, 200], [190.0, 200], [200.0, 200]]
#
# Ran:
# [1199.3229007296804, 1173.5459791030951, 1115.6416415280942, 1031.6171218571321, 1000.2129933270116, 935.69052620208845, 867.29454085673501, 785.07560873465309, 755.46765992057874, 648.38264558538037, 618.22291310348703, 515.03355994989863, 451.18831401582094, 386.18194495317141, 301.51290229392919, 249.72600925901821, 140.70086728557092, 54.318120052513201, 33.273159516528231, -26.233637921485172, -110.55188453236937]
# HE:
# [1453.3024072843414, 1407.4574956200074, 1353.5400710914757, 1292.4775346350721, 1224.6288121529074, 1208.4439305926826, 1124.8517053485921, 1062.2808336491221, 1002.9291015537286, 991.88921536950579, 1017.4631093509886, 1040.6623503418746, 1124.7348170165228, 1120.1637487712796, 1185.1050760821236, 1220.2526426940281, 1178.4795150375173, 1231.6944367735559, 1218.1285441876485, 1208.2924634072529, 1242.6644328043071]
# Opt3:
# [1378.9131676047921, 1361.3149406854725, 1306.5258254768055, 1305.9714487245142, 1256.8393697086494, 1242.32733692119, 1184.7349748897809, 1179.1366761987197, 1135.8270818894448, 1116.7277056525913, 1166.7980955167623, 1137.3806201247637, 1163.4034194101148, 1188.7262816800453, 1178.7746721675653, 1239.0244247028259, 1211.5396883355779, 1215.3454911242761, 1209.4310733916832, 1212.7703587673354, 1184.8223678987165]


# K = 4
# [[0.0, 400], [20.0, 400], [40.0, 400], [60.0, 400], [80.0, 400], [100.0, 400], [120.0, 400], [140.0, 400], [160.0, 400], [180.0, 400], [200.0, 400], [220.0, 400], [240.0, 400], [260.0, 400], [280.0, 400], [300.0, 400], [320.0, 400], [340.0, 400], [360.0, 400], [380.0, 400], [400.0, 400]]
# EPISODE = 50
# Ran:  [1224.390889996801, 1111.8134961448709, 998.07147242317865, 880.67108246872658, 747.77332721302218, 632.55891714339305, 510.71279656171276, 384.48234360072064, 235.30201282607683, 115.86778575620643, -33.907011145528735, -171.6975625823147, -336.66111260811186, -454.5591352264899, -613.57304795352195, -783.29986961039413, -868.53449484065175, -1093.872352794441, -1156.4602861984281, -1339.1784016289748, -1494.9767206464201]
# HE:  [1433.6574238164246, 1336.6540854279933, 1227.6488985840108, 1128.1125441368224, 1003.3861805537318, 897.77546746041628, 796.09868341253298, 698.67746872260716, 589.98650001056615, 581.63763478214719, 603.94156311049028, 731.71162016067626, 865.87753580160756, 986.39746343173999, 1064.6651426735782, 1127.991871914584, 1149.7578139807704, 1196.2563281811294, 1198.1826123070389, 1207.8618784811133, 1212.1742925959295]
# Opt3:  [1379.1627860504166, 1305.5319850471903, 1239.9247554537253, 1181.8022965653672, 1122.8944391879404, 1066.5552034532138, 1008.4059125659734, 965.83779391100757, 924.69879430979336, 929.02690827210142, 953.41136500268851, 1001.6051559587395, 1072.6682787682853, 1124.4017942083203, 1171.786012008974, 1180.9528086191674, 1205.9675839060319, 1202.8254481655665, 1196.7864793241852, 1202.5374834965778, 1206.6948108794502]

# K = 2
# [[0.0, 200], [10.0, 200], [20.0, 200], [30.0, 200], [40.0, 200], [50.0, 200], [60.0, 200], [70.0, 200], [80.0, 200], [90.0, 200], [100.0, 200], [110.0, 200], [120.0, 200], [130.0, 200], [140.0, 200], [150.0, 200], [160.0, 200], [170.0, 200], [180.0, 200], [190.0, 200], [200.0, 200]]
# EPISODE = 50
# Ran:  [1234.8973050234315, 1176.1655908912194, 1114.7019388862425, 1044.5855614286438, 997.80044380460038, 922.32445197846585, 872.06684771638379, 799.67355565009052, 742.40021088890808, 657.55176907596524, 586.95782056955159, 506.2572162948473, 433.73886504307609, 373.19496971395341, 297.86254630750551, 208.84943285798184, 161.41178927637711, 90.376325659019216, -2.7434270768673219, -59.568294261350445, -125.68675824953047]
# HE:  [1441.6221429071988, 1394.7623007773554, 1333.7404800019021, 1279.8941748308814, 1224.6805672456921, 1177.4792106258096, 1131.9388811904951, 1065.1521328567933, 1013.6535923925788, 1005.0042744924774, 1015.9095943339946, 1056.9975246410177, 1114.5132033534164, 1164.7237915959452, 1180.4273760670421, 1196.7599171660486, 1205.3330988597968, 1205.6588503244288, 1205.6103009743933, 1210.4059943695613, 1218.2253228661586]
# Opt3:  [1381.90347012448, 1323.8826770274695, 1292.4182901449144, 1257.7444968139368, 1242.4087917256495, 1215.9756958164073, 1186.7213859053593, 1151.4094906536329, 1152.5365101060675, 1124.2589826649064, 1147.5870242654905, 1150.1688283603648, 1170.0431698419118, 1194.6969171430746, 1191.8422494196557, 1205.6109918863324, 1205.5699790087328, 1219.4470182774289, 1205.643801299587, 1198.6922586961705, 1199.619268912827]

# K = 1
# [[0.0, 100], [5.0, 100], [10.0, 100], [15.0, 100], [20.0, 100], [25.0, 100], [30.0, 100], [35.0, 100], [40.0, 100], [45.0, 100], [50.0, 100], [55.0, 100], [60.0, 100], [65.0, 100], [70.0, 100], [75.0, 100], [80.0, 100], [85.0, 100], [90.0, 100], [95.0, 100], [100.0, 100]]
# EPISODE = 50
# Ran:  [1232.3279700087849, 1211.162845329111, 1168.2080109265034, 1142.0288896989159, 1117.2672958056751, 1081.1562365394877, 1045.8556659863698, 1018.6987468928752, 978.01429362890894, 951.21962427464143, 909.58613281294004, 863.79732891467506, 835.64242950915821, 795.323389914117, 767.16559293637283, 701.71126635453152, 670.27820369726203, 627.9873717145008, 578.25941550600089, 555.94615998092672, 552.45333068085915]
# HE:  [1429.9939937912086, 1409.3588157442759, 1387.9264463739307, 1358.6367954661973, 1341.1027429062522, 1311.7035705005524, 1279.2605144002105, 1255.4582455840796, 1230.7654044044787, 1217.010978505471, 1213.8435133358885, 1226.4376814127409, 1237.6339193514577, 1230.0856887845814, 1249.7712704435958, 1235.4898007527711, 1206.9416166364372, 1218.0433878741933, 1221.8857456349758, 1215.1736251302818, 1213.7176163778408]
# Opt3:  [1376.7740613632639, 1352.0887527844368, 1342.7246219344086, 1315.1521921860174, 1314.1596781931792, 1299.0611793684395, 1276.6743834064409, 1260.370105977549, 1233.2435713489374, 1232.6778277682963, 1225.3748538896652, 1223.2744716452353, 1226.2536999928991, 1216.4493343581451, 1219.3708780271902, 1211.0209767791305, 1206.5313136064924, 1210.3876513370653, 1203.5264585755308, 1208.7835908624743, 1210.8341724983384]
