import envs.FinalEnv as Env
# import envs.BasicEnv as Env
import random
import matplotlib.pyplot as plt


# Params
INTERACTION_ROUND = 1000

AGENT_NUM = 100
BANDWIDTH = 4
NEIGHBORHOOD_SIZE = 12

REWIRING_COST = 40
REWIRING_PROBABILITY = 0.005

# K for he
K = 4

REWIRING_STRATEGY = 0

NETWORK_TYPE = 0
DISTRIBUTION_TYPE = 0

EPISODE = 30

average_reward = []
highest_reward = []
lowest_reward = []
average_rewiring = 0.0

DEBUG = -1

c_sight_pair = []
for x in range(21):
    c_sight_pair.append([x * 5.0])
print(c_sight_pair)


sg_result = []

if __name__ == '__main__':

    # for sg in [0,1,2,3,4]:
    for sg in [4]:
        result = []
        REWIRING_STRATEGY = sg

        if REWIRING_STRATEGY == 0:
            print('--Rewiring strategy: Random')
        if REWIRING_STRATEGY == 1:
            print('--Rewiring strategy: HE')
        if REWIRING_STRATEGY == 2:
            print('--Rewiring strategy: Opt1')
        if REWIRING_STRATEGY == 3:
            print('--Rewiring strategy: Opt2')
        if REWIRING_STRATEGY == 4:
            print('--Rewiring strategy: Opt3')

        print('--K for khe:', K)
        for [c] in c_sight_pair:
            y_axi = []

            average_reward = []
            highest_reward = []
            lowest_reward = []
            average_rewiring = 0.0

            REWIRING_COST = c
            print('--Rewiring cost:', c)
            print('--Rewiring probability:', REWIRING_PROBABILITY)

            for repeat in range(EPISODE):
                if DEBUG > -1:
                    print('Episode: ' + str(repeat))

                # init Env
                env = Env.BasicEnv(AGENT_NUM,
                                   NETWORK_TYPE,
                                   BANDWIDTH,
                                   NEIGHBORHOOD_SIZE,
                                   REWIRING_COST,
                                   REWIRING_PROBABILITY,
                                   DISTRIBUTION_TYPE,
                                   REWIRING_STRATEGY,
                                   K)

                phi = env.phi

                for iteration in range(INTERACTION_ROUND):
                    if DEBUG > 0:
                        print('-- Interaction round: ', iteration)
                    # to avoid the the problem that decision order may influence the fairness
                    # shuffle the order at every iteration
                    agents = env.network.nodes()
                    # random.shuffle(agents)
                    # print('Env initialized.')

                    # rewiring phase
                    # print('Rewiring phase.')

                    # do rewiring
                    # should be good with sparse rewiring
                    for i in agents:
                        agent = env.network.node[i]
                        if random.uniform(0, 1) < phi:
                            neighbors_num = len(env.getNeighbors(i))
                            # print(network.neighbors(i))
                            if neighbors_num > 0:
                                if len(agent['S_'] + agent['BL']) > 0:
                                    # do rewire
                                    if DEBUG > 0:
                                        print('Agent ' + str(i) + ' does rewiring.')
                                    env._rewire(i)
                                else:
                                    if DEBUG > 0:
                                        print('No more available potential peers.')
                            else:
                                if DEBUG > 0:
                                    print('Agent ' + str(i) + ' is isolated.')
                                # TO-DO
                                if len(agent['S_'] + agent['BL']) > 0:
                                    # do rewire
                                    if DEBUG > 0:
                                        print('Agent ' + str(i) + ' does rewiring.')
                                    env._rewire(i)
                                else:
                                    if DEBUG > 0:
                                        print(i, 'has no more available potential peers.')

                    # TO-DO
                    # more reasonable situation, but complex
                    # 1) raise rewiring proposals.
                    # 2) decide rewiring target

                    # interaction phase
                    # print('Interaction phase.')
                    for i in env.network.nodes():
                        # do interaction
                        neighborhood = env.getNeighbors(i)
                        if len(neighborhood) > 0:
                            # 1) randomly choose a opponent in S (choose the best opponent)
                            oppo_index = random.randint(0, len(neighborhood) - 1)
                            oppo_agent_no = neighborhood[oppo_index]

                            # sort the players
                            left = min(i, oppo_agent_no)
                            right = max(i, oppo_agent_no)

                            # 2) agent i interacts with certain opponent
                            env._interact(left, right)
                            # env._interact(i, oppo_agent_no)
                        else:
                            if DEBUG > 0:
                                print('agent ', i, ' has no neighbor.')

                                # statistic
                group_reward, group_rewiring = env.printAgentInfo(0)
                average_reward.append(sum(group_reward) / AGENT_NUM)
                highest_reward.append(max(group_reward))
                lowest_reward.append(min(group_reward))

                average_rewiring = average_rewiring + group_rewiring / AGENT_NUM

                # print(env.oppActionDis)

            # print('--------------------------------------------------------------------')
            # print('--------------------------------------------------------------------')
            # print('Final outputs:')
            # print('Mean average rewiring: ' + str(average_rewiring / EPISODE))
            print('Mean average reward: ' + str(sum(average_reward) / EPISODE))
            # print('Mean highest reward: ' + str(sum(highest_reward) / EPISODE))
            # print('Mean lowest reward: ' + str(sum(lowest_reward) / EPISODE))
            # print('--------------------------------------------------------------------')
            # print('--------------------------------------------------------------------')

            result.append(sum(average_reward) / EPISODE)
        print('Interim result:', result)
        sg_result.append(result)

    print('======================================')
    print('Results below.')

    for l in sg_result:
        print(l)

    # plt.xlim(0.0, 1.0)
    # plt.ylim(-0.1, 1.0)

    # for y in y_list:
    #     plt.plot(x_axi, y)
    # plt.title('(50,3,9) - Optimal - k-sight')
    #
    # plt.show()




############################################################
# Results

# 18/01/24
# adaptive sight
# 3 optimal rewiring strategy

# fix rewiring probability \phi = 0.01

# cost
# [[0.0], [5.0], [10.0], [15.0], [20.0], [25.0], [30.0], [35.0], [40.0], [45.0], [50.0], [55.0], [60.0], [65.0], [70.0], [75.0], [80.0], [85.0], [90.0], [95.0], [100.0]]

# ran
# [1101.1159068599238, 1075.6232731561254, 1064.1388584956819, 1030.7520046020736, 1011.2088616784961, 980.099983294391, 939.02418079660015, 923.61988403136888, 904.07984826281643, 878.97336236438844, 854.37110701892527, 827.72533154430369, 803.82298021561428, 787.88070136934641, 756.4292098189718, 715.63112073070511, 708.26300261937581, 657.16231258368327, 651.91795172633249, 620.8772113818726, 593.37802596619156]
# KHE K = 0.5, 1, 2, 4
# [1457.6004115903033, 1400.0183545591913, 1350.1124754213108, 1315.5419793533001, 1258.3020882673188, 1289.6221564817254, 1349.3597216186718, 1268.7099744930028, 1204.4709528586804, 1152.8307368020701, 1132.1231282238921, 1149.427982475077, 1156.0449733115436, 1134.2749717845177, 1147.343823188671, 1156.8826066882982, 1164.5174069737664, 1150.2009567546818, 1138.7716291170705, 1159.2282260469976, 1147.3111114198803]
# [1457.6397675766102, 1402.9920884565445, 1351.1874038372669, 1310.1183501794474, 1268.5739049623501, 1290.5269240755858, 1329.823996839124, 1279.8504521455372, 1189.4046490726025, 1155.856212963449, 1138.0021056500048, 1142.0689484754598, 1149.1769429097596, 1144.5761233704325, 1140.2436009065304, 1143.5341050196216, 1141.8776843592468, 1150.9282661483905, 1139.7592734500308, 1147.6267580831616, 1141.8691000326419]

# [1451.2092148760808, 1405.6521554956958, 1356.2688736324149, 1298.0344189479972, 1246.8756056069274, 1206.9494245375463, 1163.0428512654419, 1118.33560426143, 1093.7388053621526, 1089.7784056978303, 1137.5801264999279, 1211.6162362489772, 1276.094465218569, 1283.6345989794891, 1271.2038304976104, 1229.3962192992237, 1198.2328661104857, 1170.3016108593888, 1147.460390233899, 1146.2002926061321, 1136.932615771618]
# [1454.1655224895451, 1407.7654657443702, 1347.6356525174754, 1305.7342085879034, 1255.3866515632915, 1205.9069014618228, 1157.3178254462955, 1108.8530458131743, 1076.2987184906947, 1079.249717927021, 1132.806516075643, 1202.6853900405774, 1263.4704570665226, 1280.8931421985678, 1264.797840182925, 1233.1824294024548, 1199.142083021326, 1156.5307537893614, 1141.4756891273455, 1146.4278481749921, 1142.3756339223621]

# [1456.4918921399869, 1408.4681740150816, 1355.0828773928292, 1300.0898054729514, 1257.7393311456653, 1204.2868834575315, 1158.3357970255186, 1108.87170480544, 1061.6076440131019, 998.60618824204062, 969.12436786061187, 894.71575553435798, 851.52170941784789, 804.09004046574341, 760.1552721584992, 733.97958145141604, 697.72724729126094, 677.23777251263562, 726.45167173355583, 732.52014690584838, 808.41745618628624]
# [1458.4351567678968, 1406.4866876541062, 1363.3517340682795, 1306.8128338716233, 1260.0460991275461, 1198.4833758428474, 1155.9952632291838, 1102.3013905230152, 1046.1572508454615, 1009.7678746411065, 951.33160814932535, 906.89961280116427, 851.26102160836695, 808.91080859297483, 768.11123132041769, 723.77228116916808, 708.6382953042405, 688.04114533685447, 714.80883159950645, 746.51602588709432, 813.2339785524822]

# [1461.4699079133948, 1390.801570374088, 1352.0738884858051, 1305.7209633955085, 1255.5372284290188, 1208.3955608286151, 1158.3233315870577, 1117.6384370115454, 1049.8312622368796, 993.33627198698377, 950.56538153167514, 911.56500900882997, 858.53302413005008, 796.25347836965284, 760.08110984382415, 705.14573608169042, 660.02813016049186, 605.79662919144346, 552.21573885586315, 489.69851833056856, 470.04891650287954]
# Opt 1,2,3
# [1304.4410349430725, 1273.6590123440305, 1288.7810021748919, 1280.9754376699175, 1288.6367263028224, 1262.5237922449562, 1280.4108217212608, 1278.5347743596681, 1281.3537121616457, 1245.2282621829265, 1245.5152494969191, 1226.3736876706685, 1238.6437039199682, 1212.9478581398455, 1202.1963758023733, 1219.4884824909775, 1213.1974523758267, 1214.4133890239468, 1194.5766278417673, 1199.8110087211453, 1210.427279443787]
# [1325.8576413188384, 1304.2132749453499, 1301.3175710349337, 1288.9397190720636, 1294.2560204174931, 1282.7899137688219, 1287.4305978781849, 1287.5856238317308, 1287.915261972259, 1275.1705816159817, 1265.9137232993394, 1268.9786694169993, 1268.2254448638196, 1278.9612447566592, 1245.0712936136099, 1264.8411574414047, 1231.6614108885592, 1252.6538244529174, 1240.9358020193215, 1258.4105694587752, 1221.2399977632615]
# [1396.0712627512985, 1398.7241691002187, 1408.9186018597052, 1381.8968756409015, 1367.5898867592714, 1372.7484110330008, 1348.5803525046699, 1367.1757715425208, 1359.6665744648647, 1354.7649087586608, 1333.1864952448805, 1335.2045525386059, 1331.5419332479032, 1330.8809746105301, 1325.2154944938607, 1320.9770627887422, 1307.057171502757, 1308.9728807967629, 1309.4227286888483, 1300.4866465929933, 1288.244094338213]

# \phi = 0.005

# ran
# [1126.4067116076228, 1107.7131116866528, 1086.6127234806761, 1077.8863100757683, 1075.9504605341688, 1060.7918411883318, 1043.2422727622729, 1040.2721802790163, 1006.6563021646464, 1007.4807582714118, 998.78830065327759, 980.3905247356995, 966.63993434102326, 957.45963879379008, 948.90708266372246, 936.54543006879442, 914.60366835980142, 900.37796458475282, 895.73608976785295, 887.05928727098728, 867.22136244795172]
#
# khe
# [1416.3990887716011, 1403.0189126369171, 1375.5968325025206, 1348.4184011135947, 1323.7444801725862, 1284.7983184770751, 1265.8329985468213, 1252.5485195563419, 1224.9743529750999, 1222.9144059699911, 1228.8719245013758, 1261.1447397754548, 1270.372129729883, 1278.263239659587, 1257.3955159440518, 1219.2810405310559, 1189.3397027316134, 1161.1000785828321, 1145.8908155588736, 1140.2423602631686, 1145.089308865269]
# [1417.5361730621557, 1397.5540997127, 1370.8541462809869, 1347.0293521927388, 1317.6267177590578, 1299.2556386758238, 1269.5480884234337, 1248.4988954694711, 1225.1875538947686, 1188.8958860109228, 1172.9590593969408, 1148.5290795310316, 1120.0196622590943, 1099.3544135255936, 1065.3155208621451, 1038.4588123447177, 1032.8067617089901, 1018.6908006667185, 1024.4537307137159, 1036.1288186819436, 1066.4458812681062]
# [1416.1172760480974, 1395.2319885825345, 1368.1022493294879, 1348.2117022606737, 1322.6447721781283, 1294.61710486627, 1271.9760533546989, 1243.7972778944136, 1215.1011091768319, 1193.3776154531554, 1171.3907223175911, 1147.7410195462176, 1118.2483985778963, 1094.4972386475483, 1071.2493778926275, 1049.4249870693841, 1013.7406430362043, 997.58311684625892, 976.5028441483156, 938.03849451943381, 919.5264746258739]
# [1421.3990565920801, 1397.3136855497166, 1367.8915820316474, 1338.5289917032701, 1316.987093508493, 1292.2736597932553, 1273.60006513793, 1248.9934334956884, 1215.0887726594394, 1201.9272081601516, 1166.7582981707451, 1147.2343129442647, 1114.2697511372742, 1092.7123453283868, 1074.0212797987131, 1033.8706188774308, 1022.9745682274878, 990.92947890790674, 967.12612803114871, 954.01718721488612, 914.93387862082147]
#
# opt
# [1274.1378689603596, 1273.9604499272764, 1282.0561967224446, 1279.9036491511793, 1270.4708303890854, 1261.4633209299398, 1266.1987468252448, 1260.3397688873499, 1265.5434684112547, 1255.7722592893663, 1251.0428113478843, 1250.6446365392849, 1251.8202678645669, 1240.6666886789185, 1243.0418657282669, 1239.2318582874138, 1230.6243306106526, 1243.6020574382451, 1226.4055176853512, 1222.7061154006444, 1220.0203030908799]
# [1274.4940255079678, 1276.3004773508521, 1266.1829434182509, 1255.102962778162, 1253.2519953321375, 1262.9647192245161, 1264.3195091250511, 1251.1597512099295, 1254.9915462950801, 1247.3428487302804, 1258.3945488965599, 1236.2456977495049, 1241.4342461756928, 1242.1881895600864, 1234.4303583732906, 1237.5637611211325, 1234.538269144067, 1234.5090153599369, 1229.2885279159657, 1226.9971325367258, 1222.4327823211631]
# [1373.129628521451, 1368.7415432723108, 1367.5495511610272, 1348.8523898341768, 1350.6995066606551, 1341.5535010176541, 1349.3048174223179, 1340.0663893521034, 1332.202899650918, 1329.8967806722505, 1322.2877991308922, 1315.950273988311, 1317.0677953075974, 1313.0141628657873, 1321.1978604992794, 1311.63544683025, 1299.9060369260444, 1307.3240942333096, 1295.0498613872446, 1290.9073205881948, 1292.0454759168031]
